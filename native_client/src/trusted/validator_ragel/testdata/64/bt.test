@hex:
  # Test illegal bit commands.
  # btr %rax,(%rax)
  48 0F B3 00
  # bts %rax,(%rax)
  48 0F AB 00
  # btc %rax,(%rax)
  48 0F BB 00
  # btrl $0x1,(%rax)
  0F BA 30 01
  # btsl $0x1,(%rax)
  0F BA 28 01
  # btcl $0x1,(%rax)
  0F BA 38 01
  # Test legal bit commands
  # btw    $0x1,(%rsp)
  66 0F BA 24 24 01
  
  # Align so that next instruction does not cross bundle boundary.
  90 90
  
  # btl    $0x1,(%rsp)
  0F BA 24 24 01
  # btq    $0x1,(%rsp)
  48 0F BA 24 24 01
  # btrl   $0x1,(%rsp)
  0F BA 34 24 01
  # btsl   $0x1,(%rsp)
  0F BA 2C 24 01
  # btcl   $0x1,(%rsp)
  0F BA 3C 24 01
@dis:
     0:	48 0f b3 00                                  	btr    %rax,(%rax)
     4:	48 0f ab 00                                  	bts    %rax,(%rax)
     8:	48 0f bb 00                                  	btc    %rax,(%rax)
     c:	0f ba 30 01                                  	btrl   $0x1,(%rax)
    10:	0f ba 28 01                                  	btsl   $0x1,(%rax)
    14:	0f ba 38 01                                  	btcl   $0x1,(%rax)
    18:	66 0f ba 24 24 01                            	btw    $0x1,(%rsp)
    1e:	90                                           	nop
    1f:	90                                           	nop
    20:	0f ba 24 24 01                               	btl    $0x1,(%rsp)
    25:	48 0f ba 24 24 01                            	btq    $0x1,(%rsp)
    2b:	0f ba 34 24 01                               	btrl   $0x1,(%rsp)
    30:	0f ba 2c 24 01                               	btsl   $0x1,(%rsp)
    35:	0f ba 3c 24 01                               	btcl   $0x1,(%rsp)
@rdfa_output:
  0: [0] unrecognized instruction
  4: [1] unrecognized instruction
  8: [2] unrecognized instruction
  c: [3] improper memory address - bad base
  10: [3] improper memory address - bad base
  14: [3] improper memory address - bad base
  return code: 1
