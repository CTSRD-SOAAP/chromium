// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Include test fixture.
GEN_INCLUDE(['../../testing/chromevox_next_e2e_test_base.js']);

GEN_INCLUDE(['../../testing/mock_tts.js']);

/**
 * Test fixture for Background.
 * @constructor
 * @extends {ChromeVoxNextE2ETest}
 */
function BackgroundTest() {}

BackgroundTest.prototype = {
  __proto__: ChromeVoxNextE2ETest.prototype,

  /** @override */
  setUp: function() {
    this.mockTts = new MockTts();
    cvox.ChromeVox.tts = this.mockTts;
  },

  /**
   * Create a function which perform the command |cmd|.
   * @param {string} cmd
   * @return {function() : void}
   */
  doCmd: function(cmd) {
    return function() {
      global.backgroundObj.onGotCommand(cmd);
    };
  },

  linksAndHeadingsDoc: function() {/*!
    <p>start</p>
    <a href='#a'>alpha</a>
    <a href='#b'>beta</a>
    <p>
      <h1>charlie</h1>
      <a href='foo'>delta</a>
    </p>
    <a href='#bar'>echo</a>
    <h2>foxtraut</h2>
    <p>end<span>of test</span></p>
  */},

  formsDoc: function() {/*!
    <select id="fruitSelect">
      <option>apple</option>
      <option>grape</option>
      <option> banana</option>
    </select>
  */}
};

/** Tests that ChromeVox classic is in this context. */
SYNC_TEST_F('BackgroundTest', 'ClassicNamespaces', function() {
  assertEquals('object', typeof(cvox));
  assertEquals('function', typeof(cvox.ChromeVoxBackground));
});

/** Tests that ChromeVox next is in this context. */
SYNC_TEST_F('BackgroundTest', 'NextNamespaces', function() {
  assertEquals('function', typeof(Background));
});

/** Tests that ChromeVox reads the desktop tree. */
TEST_F('BackgroundTest', 'DesktopFocus', function() {
  function findStatusTray(root) {
    if (root.role == chrome.automation.RoleType.button &&
        root.attributes.name &&
        root.attributes.name.indexOf('Status tray') != -1) {
      return root;
    }
    for (var i = 0; i < root.children.length; i++) {
      var found = findStatusTray(root.children[i]);
      if (found)
        return found;
    }
    return null;
  }

  chrome.automation.getDesktop(function(root) {
    var testButton = findStatusTray(root);
    cvox.ChromeVox.tts.expectSpeech('Status tray', testDone);
    testButton.focus();
  });
});

/** Tests feedback once a page loads. */
TEST_F('BackgroundTest', 'MANUAL_InitialFeedback', function() {
  cvox.ChromeVox.tts.expectSpeech('start', testDone);

  this.runWithTab(function() {/*!
    <p>start
    <p>end
  */});
});

/** Tests consistency of navigating forward and backward. */
TEST_F('BackgroundTest', 'MANUAL_ForwardBackwardNavigation', function() {
  this.runWithLoadedTree(this.linksAndHeadingsDoc, function() {
      var doCmd = this.doCmd.bind(this);
      var expectAfter =
          cvox.ChromeVox.tts.expectSpeechAfter.bind(cvox.ChromeVox.tts);

      expectAfter('alpha', doCmd('nextLink'));
      expectAfter('beta', doCmd('nextLink'));
      expectAfter('delta', doCmd('nextLink'));
      expectAfter('beta', doCmd('previousLink'));

      expectAfter('charlie', doCmd('nextHeading'));
      expectAfter('foxtraut', doCmd('nextHeading'));
      expectAfter('charlie', doCmd('previousHeading'));

      expectAfter('delta', doCmd('nextElement'));
      expectAfter('echo', doCmd('nextElement'));
      expectAfter('foxtraut', doCmd('nextElement'));
      expectAfter('end', doCmd('nextElement'));
      expectAfter('foxtraut', doCmd('previousElement'));
      expectAfter('end of test', doCmd('nextLine'));

      expectAfter('start', doCmd('goToBeginning'));
      expectAfter('of test', doCmd('goToEnd'));

      cvox.ChromeVox.tts.finishExpectations();
    }.bind(this)
  );
});

TEST_F('BackgroundTest', 'MANUAL_CaretNavigation', function() {
  this.runWithLoadedTree(this.linksAndHeadingsDoc, function() {
      var doCmd = this.doCmd.bind(this);
      var expectAfter =
          cvox.ChromeVox.tts.expectSpeechAfter.bind(cvox.ChromeVox.tts);

      expectAfter('t', doCmd('nextCharacter'), true);
      expectAfter('a', doCmd('nextCharacter'), true);
      expectAfter('Link alpha', doCmd('nextWord'), true);
      expectAfter('Link beta', doCmd('nextWord'), true);
      expectAfter('Heading charlie', doCmd('nextWord'), true);
      expectAfter('Link delta', doCmd('nextLine'), true);
      expectAfter('Link echo', doCmd('nextLine'), true);
      expectAfter('Heading foxtraut', doCmd('nextLine'), true);
      expectAfter(
          'end of test', doCmd('nextLine'), true);
      expectAfter('n', doCmd('nextCharacter'), true);
      expectAfter('e', doCmd('previousCharacter'), true);
      expectAfter('Heading t', doCmd('previousCharacter'), true);
      expectAfter('foxtraut', doCmd('previousWord'), true);
      expectAfter('Link echo', doCmd('previousWord'), true);
      expectAfter('Link a', doCmd('previousCharacter'), true);
      expectAfter('t', doCmd('previousCharacter'), true);
      expectAfter('Link echo', doCmd('nextWord'), true);

      cvox.ChromeVox.tts.finishExpectations();
  }.bind(this));
});

// Flaky: http://crbug.com/451362
TEST_F('BackgroundTest', 'DISABLED_SelectSingleBasic', function() {
  this.runWithLoadedTree(this.formsDoc, function(tabId) {
    var sendDownToSelect =
        this.sendKeyToElement.bind(this, tabId, 'Down', '#fruitSelect');
    var expect = cvox.ChromeVox.tts.expectSpeech.bind(cvox.ChromeVox.tts);
    expect('apple Menu item  1 of 3 ', sendDownToSelect, true);
    expect('grape  2 of 3 ', sendDownToSelect, true);
    expect('banana  3 of 3 ', testDone, true);
    cvox.ChromeVox.tts.finishExpectations();
  }.bind(this));
});

TEST_F('BackgroundTest', 'MANUAL_ContinuousRead', function() {
  this.runWithLoadedTree(this.linksAndHeadingsDoc, function() {
    var doCmd = this.doCmd.bind(this);
    var expect =
        cvox.ChromeVox.tts.expectSpeechAfter.bind(cvox.ChromeVox.tts);
    var sendEndEvent = function() {
        window.setTimeout(function() {
          this.sendEndEvent();
      }.bind(this), 0);
    }.bind(cvox.ChromeVox.tts);

    expect('start', doCmd('continuousRead'));
    expect('alpha Link', sendEndEvent);
    expect('beta Link', sendEndEvent);
    expect('Heading charlie', sendEndEvent);
    cvox.ChromeVox.tts.finishExpectations();
  }.bind(this));
});
